// <auto-generated />
using System;
using MOJA.MobileStore.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MOJA.MobileStore.Persistence.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    [Migration("20230729000546_UpdatePersonAndRelatedEntities")]
    partial class UpdatePersonAndRelatedEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CommunicationNetworkProduct", b =>
                {
                    b.Property<int>("CommunicationNetworksId")
                        .HasColumnType("int");

                    b.Property<long>("ProductsId")
                        .HasColumnType("bigint");

                    b.HasKey("CommunicationNetworksId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("CommunicationNetworkProduct");
                });

            modelBuilder.Entity("CommunicationTechnologyProduct", b =>
                {
                    b.Property<int>("CommunicationTechnologiesId")
                        .HasColumnType("int");

                    b.Property<long>("ProductsId")
                        .HasColumnType("bigint");

                    b.HasKey("CommunicationTechnologiesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("CommunicationTechnologyProduct");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Answer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("PersonId1")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PersonId1");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("CustomerId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("ProductId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Features.BackGuardMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BackGuardMaterial");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Features.CommunicationNetwork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CommunicationNetwork");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Features.CommunicationTechnology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CommunicationTechnology");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Features.InternalStorage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("InternalStorage");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Features.MemoryCardSupport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MemoryCardSupport");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Features.MobileBrand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("About")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MobileBrand");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Features.MobileCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MobileCategory");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Features.MobileColor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MobileColor");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Features.MobileOS", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MobileOS");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Features.MobileRam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MobileRam");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Features.MobileSensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MobileSensor");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Features.MobileSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MobileSize");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Features.MobileTechnology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MobileTechnology");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Features.PhotoResolution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PhotoResolution");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Features.RearCamera", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RearCamera");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Features.SIMDesc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SIMDesc");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Features.ScreenTechnology", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ScreenTechnology");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Features.SpecialFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SpecialFeature");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Point", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<float>("AvgScore")
                        .HasColumnType("real");

                    b.Property<long>("NumberOfparticipants")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Point");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Product", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("BackGuardId")
                        .HasColumnType("int");

                    b.Property<string>("BatterySpecifications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bluetooth")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("BluetoothVersion")
                        .HasColumnType("real");

                    b.Property<string>("BodyStructure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("CPU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CPUFrequency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CameraCapabilitiesDescriptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Chip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommunicationPorts")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilmingDescriptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Flash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrontCameraDescriptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GPU")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Height")
                        .HasColumnType("real");

                    b.Property<int>("InternalStorageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IntrodutionDate")
                        .HasColumnType("date");

                    b.Property<bool>("Is64Bit")
                        .HasColumnType("bit");

                    b.Property<float>("Length")
                        .HasColumnType("real");

                    b.Property<int>("MemoryCardSupportId")
                        .HasColumnType("int");

                    b.Property<int>("MobileCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OSId")
                        .HasColumnType("int");

                    b.Property<string>("OtherFeatures")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhotoResolutionId")
                        .HasColumnType("int");

                    b.Property<long?>("PointId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductIntroduction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RAMId")
                        .HasColumnType("int");

                    b.Property<int>("RearCameraId")
                        .HasColumnType("int");

                    b.Property<short>("SIMCardNumber")
                        .HasColumnType("smallint");

                    b.Property<int>("SIMDescId")
                        .HasColumnType("int");

                    b.Property<short>("ScreenPixelsPerInch")
                        .HasColumnType("smallint");

                    b.Property<short>("ScreenResolutionHeight")
                        .HasColumnType("smallint");

                    b.Property<short>("ScreenResolutionLenght")
                        .HasColumnType("smallint");

                    b.Property<int>("ScreenTechnologyId")
                        .HasColumnType("int");

                    b.Property<int>("SizeId")
                        .HasColumnType("int");

                    b.Property<Guid>("StoreProductID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.Property<float>("Width")
                        .HasColumnType("real");

                    b.Property<string>("Wifi")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BackGuardId");

                    b.HasIndex("BrandId");

                    b.HasIndex("InternalStorageId");

                    b.HasIndex("MemoryCardSupportId");

                    b.HasIndex("MobileCategoryId");

                    b.HasIndex("OSId");

                    b.HasIndex("PhotoResolutionId");

                    b.HasIndex("PointId")
                        .IsUnique()
                        .HasFilter("[PointId] IS NOT NULL");

                    b.HasIndex("RAMId");

                    b.HasIndex("RearCameraId");

                    b.HasIndex("SIMDescId");

                    b.HasIndex("ScreenTechnologyId");

                    b.HasIndex("SizeId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.ProductImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImage");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("CustomerId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("ProductId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("ProductId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Users.Customers.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("StateOCId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("StateOCId");

                    b.ToTable("Cities", "Customer");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Users.Customers.CustomerAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("CustomerId1")
                        .HasColumnType("nvarchar(450)");

                    b.Property<short>("Plaque")
                        .HasColumnType("smallint");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<int?>("StateOCId")
                        .HasColumnType("int");

                    b.Property<short?>("Unit")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CustomerId1");

                    b.HasIndex("StateId");

                    b.HasIndex("StateOCId");

                    b.ToTable("Addresses", "Customer");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Users.Customers.StateOC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("StateOCs", "Customer");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Users.Person", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NationalCode")
                        .HasMaxLength(20)
                        .HasColumnType("nchar(20)")
                        .IsFixedLength();

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "c25eb38a-f9b8-41a3-ab97-70d871fbb225",
                            ConcurrencyStamp = "c25eb38a-f9b8-41a3-ab97-70d871fbb225",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b659e8f0-2663-48ac-8c3e-d5ef3726ba92",
                            RoleId = "c25eb38a-f9b8-41a3-ab97-70d871fbb225"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MobileColorProduct", b =>
                {
                    b.Property<int>("MobileColorsId")
                        .HasColumnType("int");

                    b.Property<long>("ProductsId")
                        .HasColumnType("bigint");

                    b.HasKey("MobileColorsId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("MobileColorProduct");
                });

            modelBuilder.Entity("MobileSensorProduct", b =>
                {
                    b.Property<long>("ProductsId")
                        .HasColumnType("bigint");

                    b.Property<int>("SensorsId")
                        .HasColumnType("int");

                    b.HasKey("ProductsId", "SensorsId");

                    b.HasIndex("SensorsId");

                    b.ToTable("MobileSensorProduct");
                });

            modelBuilder.Entity("MobileTechnologyProduct", b =>
                {
                    b.Property<int>("MobileTechnologiesId")
                        .HasColumnType("int");

                    b.Property<long>("ProductsId")
                        .HasColumnType("bigint");

                    b.HasKey("MobileTechnologiesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("MobileTechnologyProduct");
                });

            modelBuilder.Entity("ProductSpecialFeature", b =>
                {
                    b.Property<long>("ProductsId")
                        .HasColumnType("bigint");

                    b.Property<int>("SpecialFeaturesId")
                        .HasColumnType("int");

                    b.HasKey("ProductsId", "SpecialFeaturesId");

                    b.HasIndex("SpecialFeaturesId");

                    b.ToTable("ProductSpecialFeature");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Users.Admins.Admin", b =>
                {
                    b.HasBaseType("MOJA.MobileStore.Domain.Entities.Users.Person");

                    b.HasDiscriminator().HasValue("Admin");

                    b.HasData(
                        new
                        {
                            Id = "b659e8f0-2663-48ac-8c3e-d5ef3726ba92",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d1789327-a501-4bda-9352-6babf37f7d5f",
                            Email = "mjek@gmail.com",
                            EmailConfirmed = true,
                            Family = "ابراهیمی",
                            LockoutEnabled = false,
                            Name = "محمد جواد",
                            NormalizedEmail = "MJEK@GMAIL.COM",
                            NormalizedUserName = "MJEK@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEFN3p5fIcQFab4WiYrUW6mC9n4YiofSN9S4sSIAJenr21RyEp8Ulx6AVYdlhjO5lQA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "18fbf9d0-dbcd-422f-a983-608b2582b412",
                            TwoFactorEnabled = false,
                            UserName = "mjek@gmail.com"
                        });
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Users.Customers.Customer", b =>
                {
                    b.HasBaseType("MOJA.MobileStore.Domain.Entities.Users.Person");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("CommunicationNetworkProduct", b =>
                {
                    b.HasOne("MOJA.MobileStore.Domain.Entities.Products.Features.CommunicationNetwork", null)
                        .WithMany()
                        .HasForeignKey("CommunicationNetworksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MOJA.MobileStore.Domain.Entities.Products.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CommunicationTechnologyProduct", b =>
                {
                    b.HasOne("MOJA.MobileStore.Domain.Entities.Products.Features.CommunicationTechnology", null)
                        .WithMany()
                        .HasForeignKey("CommunicationTechnologiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MOJA.MobileStore.Domain.Entities.Products.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Answer", b =>
                {
                    b.HasOne("MOJA.MobileStore.Domain.Entities.Users.Person", "Person")
                        .WithMany("Answers")
                        .HasForeignKey("PersonId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MOJA.MobileStore.Domain.Entities.Products.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Comment", b =>
                {
                    b.HasOne("MOJA.MobileStore.Domain.Entities.Users.Customers.Customer", "Customer")
                        .WithMany("Comments")
                        .HasForeignKey("CustomerId1");

                    b.HasOne("MOJA.MobileStore.Domain.Entities.Products.Product", "Product")
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Product", b =>
                {
                    b.HasOne("MOJA.MobileStore.Domain.Entities.Products.Features.BackGuardMaterial", "BackGuard")
                        .WithMany("Products")
                        .HasForeignKey("BackGuardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MOJA.MobileStore.Domain.Entities.Products.Features.MobileBrand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MOJA.MobileStore.Domain.Entities.Products.Features.InternalStorage", "InternalStorage")
                        .WithMany("Products")
                        .HasForeignKey("InternalStorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MOJA.MobileStore.Domain.Entities.Products.Features.MemoryCardSupport", "MemoryCardSupport")
                        .WithMany("Products")
                        .HasForeignKey("MemoryCardSupportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MOJA.MobileStore.Domain.Entities.Products.Features.MobileCategory", "MobileCategory")
                        .WithMany("Products")
                        .HasForeignKey("MobileCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MOJA.MobileStore.Domain.Entities.Products.Features.MobileOS", "OS")
                        .WithMany("Products")
                        .HasForeignKey("OSId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MOJA.MobileStore.Domain.Entities.Products.Features.PhotoResolution", "PhotoResolution")
                        .WithMany("Products")
                        .HasForeignKey("PhotoResolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MOJA.MobileStore.Domain.Entities.Products.Point", "Point")
                        .WithOne("Product")
                        .HasForeignKey("MOJA.MobileStore.Domain.Entities.Products.Product", "PointId");

                    b.HasOne("MOJA.MobileStore.Domain.Entities.Products.Features.MobileRam", "RAM")
                        .WithMany("Products")
                        .HasForeignKey("RAMId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MOJA.MobileStore.Domain.Entities.Products.Features.RearCamera", "RearCamera")
                        .WithMany("Products")
                        .HasForeignKey("RearCameraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MOJA.MobileStore.Domain.Entities.Products.Features.SIMDesc", "SIMDesc")
                        .WithMany("Products")
                        .HasForeignKey("SIMDescId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MOJA.MobileStore.Domain.Entities.Products.Features.ScreenTechnology", "ScreenTechnology")
                        .WithMany("Products")
                        .HasForeignKey("ScreenTechnologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MOJA.MobileStore.Domain.Entities.Products.Features.MobileSize", "Size")
                        .WithMany("Products")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BackGuard");

                    b.Navigation("Brand");

                    b.Navigation("InternalStorage");

                    b.Navigation("MemoryCardSupport");

                    b.Navigation("MobileCategory");

                    b.Navigation("OS");

                    b.Navigation("PhotoResolution");

                    b.Navigation("Point");

                    b.Navigation("RAM");

                    b.Navigation("RearCamera");

                    b.Navigation("SIMDesc");

                    b.Navigation("ScreenTechnology");

                    b.Navigation("Size");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.ProductImage", b =>
                {
                    b.HasOne("MOJA.MobileStore.Domain.Entities.Products.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Question", b =>
                {
                    b.HasOne("MOJA.MobileStore.Domain.Entities.Users.Customers.Customer", "Customer")
                        .WithMany("Questions")
                        .HasForeignKey("CustomerId1");

                    b.HasOne("MOJA.MobileStore.Domain.Entities.Products.Product", "Product")
                        .WithMany("Questions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Users.Customers.City", b =>
                {
                    b.HasOne("MOJA.MobileStore.Domain.Entities.Users.Customers.StateOC", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateOCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Users.Customers.CustomerAddress", b =>
                {
                    b.HasOne("MOJA.MobileStore.Domain.Entities.Users.Customers.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MOJA.MobileStore.Domain.Entities.Users.Customers.Customer", "Customer")
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId1");

                    b.HasOne("MOJA.MobileStore.Domain.Entities.Users.Customers.StateOC", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MOJA.MobileStore.Domain.Entities.Users.Customers.StateOC", null)
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("StateOCId");

                    b.Navigation("City");

                    b.Navigation("Customer");

                    b.Navigation("State");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MOJA.MobileStore.Domain.Entities.Users.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MOJA.MobileStore.Domain.Entities.Users.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MOJA.MobileStore.Domain.Entities.Users.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MOJA.MobileStore.Domain.Entities.Users.Person", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MobileColorProduct", b =>
                {
                    b.HasOne("MOJA.MobileStore.Domain.Entities.Products.Features.MobileColor", null)
                        .WithMany()
                        .HasForeignKey("MobileColorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MOJA.MobileStore.Domain.Entities.Products.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MobileSensorProduct", b =>
                {
                    b.HasOne("MOJA.MobileStore.Domain.Entities.Products.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MOJA.MobileStore.Domain.Entities.Products.Features.MobileSensor", null)
                        .WithMany()
                        .HasForeignKey("SensorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MobileTechnologyProduct", b =>
                {
                    b.HasOne("MOJA.MobileStore.Domain.Entities.Products.Features.MobileTechnology", null)
                        .WithMany()
                        .HasForeignKey("MobileTechnologiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MOJA.MobileStore.Domain.Entities.Products.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductSpecialFeature", b =>
                {
                    b.HasOne("MOJA.MobileStore.Domain.Entities.Products.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MOJA.MobileStore.Domain.Entities.Products.Features.SpecialFeature", null)
                        .WithMany()
                        .HasForeignKey("SpecialFeaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Features.BackGuardMaterial", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Features.InternalStorage", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Features.MemoryCardSupport", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Features.MobileBrand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Features.MobileCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Features.MobileOS", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Features.MobileRam", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Features.MobileSize", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Features.PhotoResolution", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Features.RearCamera", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Features.SIMDesc", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Features.ScreenTechnology", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Point", b =>
                {
                    b.Navigation("Product")
                        .IsRequired();
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Product", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Images");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Products.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Users.Customers.StateOC", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("CustomerAddresses");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Users.Person", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("MOJA.MobileStore.Domain.Entities.Users.Customers.Customer", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Comments");

                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
